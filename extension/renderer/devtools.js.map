{"version":3,"file":"devtools.js","sources":["/Users/junhongguo/browserDisk/src/renderer/entrys/devtools.tsx","/Users/junhongguo/browserDisk/node_modules/.pnpm/@rsbuild+core@1.2.19/node_modules/@rsbuild/core/dist/client/hmr.js","/Users/junhongguo/browserDisk/node_modules/.pnpm/@rsbuild+core@1.2.19/node_modules/@rsbuild/core/dist/client/overlay.js"],"sourcesContent":["chrome.devtools.panels.create(\n  'BrowserDisk',\n  '128.png',\n  'renderer/devtoolsPanel.html'\n);\n","const compilationId = RSBUILD_COMPILATION_NAME;\nconst hmr_rslib_entry_config = RSBUILD_CLIENT_CONFIG;\nconst resolvedConfig = RSBUILD_RESOLVED_CLIENT_CONFIG;\nfunction formatURL(config) {\n    const { location } = self;\n    const hostname = config.host || location.hostname;\n    const port = config.port || location.port;\n    const protocol = config.protocol || ('https:' === location.protocol ? 'wss' : 'ws');\n    const pathname = config.path || '/rsbuild-hmr';\n    if ('undefined' != typeof URL) {\n        const url = new URL('http://localhost');\n        url.port = String(port);\n        url.hostname = hostname;\n        url.protocol = protocol;\n        url.pathname = pathname;\n        url.searchParams.append('compilationId', compilationId);\n        return url.toString();\n    }\n    const colon = -1 === protocol.indexOf(':') ? ':' : '';\n    return `${protocol}${colon}//${hostname}:${port}${pathname}`;\n}\nlet isFirstCompilation = true;\nlet lastCompilationHash = null;\nlet hasCompileErrors = false;\nfunction clearOutdatedErrors() {\n    if (console.clear && hasCompileErrors) console.clear();\n}\nlet createOverlay;\nlet clearOverlay;\nconst registerOverlay = (createFn, clearFn)=>{\n    createOverlay = createFn;\n    clearOverlay = clearFn;\n};\nfunction handleSuccess() {\n    clearOutdatedErrors();\n    const isHotUpdate = !isFirstCompilation;\n    isFirstCompilation = false;\n    hasCompileErrors = false;\n    if (isHotUpdate) tryApplyUpdates();\n}\nfunction handleWarnings(param) {\n    let { text } = param;\n    clearOutdatedErrors();\n    const isHotUpdate = !isFirstCompilation;\n    isFirstCompilation = false;\n    hasCompileErrors = false;\n    for(let i = 0; i < text.length; i++){\n        if (5 === i) {\n            console.warn('There were more warnings in other files, you can find a complete log in the terminal.');\n            break;\n        }\n        console.warn(text[i]);\n    }\n    if (isHotUpdate) tryApplyUpdates();\n}\nfunction handleErrors(param) {\n    let { text, html } = param;\n    clearOutdatedErrors();\n    isFirstCompilation = false;\n    hasCompileErrors = true;\n    for (const error of text)console.error(error);\n    if (createOverlay) createOverlay(html);\n}\nconst isUpdateAvailable = ()=>lastCompilationHash !== __webpack_hash__;\nfunction tryApplyUpdates() {\n    if (!isUpdateAvailable()) return;\n    if (!import.meta.webpackHot) {\n        reloadPage();\n        return;\n    }\n    if ('idle' !== import.meta.webpackHot.status()) return;\n    const handleApplyUpdates = (err, updatedModules)=>{\n        const forcedReload = err || !updatedModules;\n        if (forcedReload) {\n            if (err) console.error('[HMR] Forced reload caused by: ', err);\n            reloadPage();\n            return;\n        }\n        if (isUpdateAvailable()) tryApplyUpdates();\n    };\n    import.meta.webpackHot.check(true).then((updatedModules)=>handleApplyUpdates(null, updatedModules), (err)=>handleApplyUpdates(err, null));\n}\nlet connection = null;\nlet reconnectCount = 0;\nfunction onOpen() {\n    console.info('[HMR] connected.');\n}\nfunction onMessage(e) {\n    const message = JSON.parse(e.data);\n    if (message.compilationId && message.compilationId !== compilationId) return;\n    switch(message.type){\n        case 'hash':\n            lastCompilationHash = message.data;\n            if (clearOverlay && isUpdateAvailable()) clearOverlay();\n            break;\n        case 'still-ok':\n        case 'ok':\n            handleSuccess();\n            break;\n        case 'static-changed':\n        case 'content-changed':\n            reloadPage();\n            break;\n        case 'warnings':\n            handleWarnings(message.data);\n            break;\n        case 'errors':\n            handleErrors(message.data);\n            break;\n    }\n}\nfunction onClose() {\n    if (reconnectCount >= hmr_rslib_entry_config.reconnect) {\n        if (hmr_rslib_entry_config.reconnect > 0) console.info('[HMR] connection failure after maximum reconnect limit exceeded.');\n        return;\n    }\n    console.info('[HMR] disconnected. Attempting to reconnect.');\n    removeListeners();\n    connection = null;\n    reconnectCount++;\n    setTimeout(connect, 1000 * 1.5 ** reconnectCount);\n}\nfunction onError() {\n    if (formatURL(hmr_rslib_entry_config) !== formatURL(resolvedConfig)) {\n        console.error('[HMR] WebSocket connection error, attempting direct fallback.');\n        removeListeners();\n        connection = null;\n        connect(true);\n    }\n}\nfunction connect() {\n    let fallback = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : false;\n    const socketUrl = formatURL(fallback ? resolvedConfig : hmr_rslib_entry_config);\n    connection = new WebSocket(socketUrl);\n    connection.addEventListener('open', onOpen);\n    connection.addEventListener('close', onClose);\n    connection.addEventListener('message', onMessage);\n    if (!fallback) connection.addEventListener('error', onError);\n}\nfunction removeListeners() {\n    if (connection) {\n        connection.removeEventListener('open', onOpen);\n        connection.removeEventListener('close', onClose);\n        connection.removeEventListener('message', onMessage);\n        connection.removeEventListener('error', onError);\n    }\n}\nfunction reloadPage() {\n    if (RSBUILD_DEV_LIVE_RELOAD) window.location.reload();\n}\nconnect();\nexport { registerOverlay };\n","import * as __WEBPACK_EXTERNAL_MODULE__hmr_702ad2d3__ from \"./hmr\";\nfunction _define_property(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\nconst { HTMLElement = class {\n}, customElements } = 'undefined' != typeof window ? window : globalThis;\nclass ErrorOverlay extends HTMLElement {\n    constructor(html){\n        super(), _define_property(this, \"close\", ()=>{\n            const remove = ()=>{\n                var _this_parentNode;\n                return null === (_this_parentNode = this.parentNode) || void 0 === _this_parentNode ? void 0 : _this_parentNode.removeChild(this);\n            };\n            if (this.animate) this.animate([\n                {\n                    opacity: 1\n                },\n                {\n                    opacity: 0\n                }\n            ], {\n                duration: 300,\n                easing: 'ease-out'\n            }).addEventListener('finish', remove);\n            else remove();\n        });\n        if (!this.attachShadow) {\n            console.warn('[Rsbuild] Current browser version does not support displaying error overlay');\n            return;\n        }\n        const root = this.attachShadow({\n            mode: 'open'\n        });\n        root.innerHTML = html;\n        root.querySelector('.close').addEventListener('click', this.close);\n        this.addEventListener('click', this.close);\n        root.querySelector('.container').addEventListener('click', (e)=>{\n            if (e.target) {\n                const { file } = e.target.dataset;\n                if (file) fetch(`/__open-in-editor?file=${encodeURIComponent(file)}`);\n            }\n            e.stopPropagation();\n        });\n        const onEscKeydown = (e)=>{\n            if ('Escape' === e.key || 'Escape' === e.code) this.close();\n            document.removeEventListener('keydown', onEscKeydown);\n        };\n        document.addEventListener('keydown', onEscKeydown);\n    }\n}\nconst overlayId = 'rsbuild-error-overlay';\nif (customElements && !customElements.get(overlayId)) customElements.define(overlayId, ErrorOverlay);\nfunction createOverlay(html) {\n    clearOverlay();\n    document.body.appendChild(new ErrorOverlay(html));\n}\nfunction clearOverlay() {\n    document.querySelectorAll(overlayId).forEach((n)=>n.close());\n}\nif ('undefined' != typeof document) (0, __WEBPACK_EXTERNAL_MODULE__hmr_702ad2d3__.registerOverlay)(createOverlay, clearOverlay);\nelse console.info('[Rsbuild] Failed to display error overlay as document is not available, you can disable the `dev.client.overlay` option.');\n"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}